generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         String   @default("student")
  avatarUrl    String?
  createdAt    DateTime @default(now())
  profile      Profile?
  exercises    Exercise[]
  routines     Routine[]
  progress     ProgressEntry[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  birthdate DateTime?
  sex       String?
  heightCm  Int?
  bio       String?
  goals     String?
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    String?
  muscleGroup String?
  equipment   String?
  imageUrl    String?
  videoUrl    String?
  createdAt   DateTime @default(now())
  creatorId   Int?
  creator     User?    @relation(fields: [creatorId], references: [id])
}

model Routine {
  id         Int      @id @default(autoincrement())
  trainerId  Int
  trainer    User     @relation(fields: [trainerId], references: [id])
  studentId  Int?
  title      String
  notes      String?
  visibility String   @default("private")
  createdAt  DateTime @default(now())
  items      RoutineExercise[]
}

model RoutineExercise {
  id         Int    @id @default(autoincrement())
  routine    Routine @relation(fields: [routineId], references: [id])
  routineId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  day        Int
  orderIndex Int
  sets       Int
  reps       String
  restSec    Int?
  load       String?
}

model ProgressEntry {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime
  weightKg   Float?
  bodyFatPct Float?
  notes      String?
  photoUrl   String?
}


model MealPlan {
  id        Int       @id @default(autoincrement())
  trainerId Int
  trainer   User      @relation(fields: [trainerId], references: [id])
  studentId Int
  title     String
  createdAt DateTime  @default(now())
  days      MealDay[]
}

model MealDay {
  id        Int     @id @default(autoincrement())
  mealPlan  MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId Int
  day       Int
  meals     Json
}
